
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "CADENA CICLO_FOR CICLO_WHILE CONDICIONAL_CONTRARIO CONDICIONAL_SI CONDICIONAL_SINO DECLARACION_BOOLEAN DECLARACION_ENTERO DECLARACION_FLOAT DECLARACION_STRING ENTERO FIN_SENTENCIA FLOTANTE IDENTIFICADOR OPERADOR OPERADOR_LOGICO_CIERRE OPERADOR_LOGICO_INT OPERADOR_LOGICO_PUERTA RESERVADA_PICOROTO RESERVADA_SEGIRPICANDOprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : declaracion\n                 | asignacion\n                 | condicional\n                 | ciclo_for\n                 | ciclo_whiledeclaracion : DECLARACION_ENTERO IDENTIFICADOR FIN_SENTENCIA\n                   | DECLARACION_STRING IDENTIFICADOR FIN_SENTENCIA\n                   | DECLARACION_FLOAT IDENTIFICADOR FIN_SENTENCIA\n                   | DECLARACION_BOOLEAN IDENTIFICADOR FIN_SENTENCIAasignacion : IDENTIFICADOR OPERADOR expresion FIN_SENTENCIAcondicional : CONDICIONAL_SI '(' expresion ')' bloque\n                   | CONDICIONAL_SI '(' expresion ')' bloque CONDICIONAL_SINO bloque\n                   | CONDICIONAL_SI '(' expresion ')' bloque CONDICIONAL_CONTRARIO bloqueciclo_for : CICLO_FOR '(' asignacion expresion FIN_SENTENCIA asignacion ')' bloqueciclo_while : CICLO_WHILE '(' expresion ')' bloqueexpresion : ENTERO\n                 | FLOTANTE\n                 | CADENA\n                 | IDENTIFICADORbloque : '{' statement_list '}' "
    
_lr_action_items = {'DECLARACION_ENTERO':([0,2,3,4,5,6,7,8,17,26,32,33,34,38,42,43,45,48,50,51,52,54,],[9,9,-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,9,-18,9,-15,-16,-23,-17,]),'DECLARACION_STRING':([0,2,3,4,5,6,7,8,17,26,32,33,34,38,42,43,45,48,50,51,52,54,],[11,11,-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,11,-18,11,-15,-16,-23,-17,]),'DECLARACION_FLOAT':([0,2,3,4,5,6,7,8,17,26,32,33,34,38,42,43,45,48,50,51,52,54,],[12,12,-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,12,-18,12,-15,-16,-23,-17,]),'DECLARACION_BOOLEAN':([0,2,3,4,5,6,7,8,17,26,32,33,34,38,42,43,45,48,50,51,52,54,],[13,13,-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,13,-18,13,-15,-16,-23,-17,]),'IDENTIFICADOR':([0,2,3,4,5,6,7,8,9,11,12,13,17,19,23,24,25,26,32,33,34,36,38,42,43,44,45,48,50,51,52,54,],[10,10,-3,-4,-5,-6,-7,-8,18,20,21,22,-2,27,27,10,27,-9,-10,-11,-12,27,-13,-14,10,10,-18,10,-15,-16,-23,-17,]),'CONDICIONAL_SI':([0,2,3,4,5,6,7,8,17,26,32,33,34,38,42,43,45,48,50,51,52,54,],[14,14,-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,14,-18,14,-15,-16,-23,-17,]),'CICLO_FOR':([0,2,3,4,5,6,7,8,17,26,32,33,34,38,42,43,45,48,50,51,52,54,],[15,15,-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,15,-18,15,-15,-16,-23,-17,]),'CICLO_WHILE':([0,2,3,4,5,6,7,8,17,26,32,33,34,38,42,43,45,48,50,51,52,54,],[16,16,-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,16,-18,16,-15,-16,-23,-17,]),'$end':([1,2,3,4,5,6,7,8,17,26,32,33,34,38,42,45,50,51,52,54,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,-18,-15,-16,-23,-17,]),'}':([3,4,5,6,7,8,17,26,32,33,34,38,42,45,48,50,51,52,54,],[-3,-4,-5,-6,-7,-8,-2,-9,-10,-11,-12,-13,-14,-18,52,-15,-16,-23,-17,]),'OPERADOR':([10,],[19,]),'(':([14,15,16,],[23,24,25,]),'FIN_SENTENCIA':([18,20,21,22,27,28,29,30,31,40,],[26,32,33,34,-22,38,-19,-20,-21,44,]),'ENTERO':([19,23,25,36,38,],[29,29,29,29,-13,]),'FLOTANTE':([19,23,25,36,38,],[30,30,30,30,-13,]),'CADENA':([19,23,25,36,38,],[31,31,31,31,-13,]),')':([27,29,30,31,35,37,38,49,],[-22,-19,-20,-21,39,41,-13,53,]),'{':([39,41,46,47,53,],[43,43,43,43,43,]),'CONDICIONAL_SINO':([42,52,],[46,-23,]),'CONDICIONAL_CONTRARIO':([42,52,],[47,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,43,],[2,48,]),'statement':([0,2,43,48,],[3,17,3,17,]),'declaracion':([0,2,43,48,],[4,4,4,4,]),'asignacion':([0,2,24,43,44,48,],[5,5,36,5,49,5,]),'condicional':([0,2,43,48,],[6,6,6,6,]),'ciclo_for':([0,2,43,48,],[7,7,7,7,]),'ciclo_while':([0,2,43,48,],[8,8,8,8,]),'expresion':([19,23,25,36,],[28,35,37,40,]),'bloque':([39,41,46,47,53,],[42,45,50,51,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','sintax.py',6),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','sintax.py',10),
  ('statement_list -> statement','statement_list',1,'p_statement_list','sintax.py',11),
  ('statement -> declaracion','statement',1,'p_statement','sintax.py',15),
  ('statement -> asignacion','statement',1,'p_statement','sintax.py',16),
  ('statement -> condicional','statement',1,'p_statement','sintax.py',17),
  ('statement -> ciclo_for','statement',1,'p_statement','sintax.py',18),
  ('statement -> ciclo_while','statement',1,'p_statement','sintax.py',19),
  ('declaracion -> DECLARACION_ENTERO IDENTIFICADOR FIN_SENTENCIA','declaracion',3,'p_declaracion','sintax.py',23),
  ('declaracion -> DECLARACION_STRING IDENTIFICADOR FIN_SENTENCIA','declaracion',3,'p_declaracion','sintax.py',24),
  ('declaracion -> DECLARACION_FLOAT IDENTIFICADOR FIN_SENTENCIA','declaracion',3,'p_declaracion','sintax.py',25),
  ('declaracion -> DECLARACION_BOOLEAN IDENTIFICADOR FIN_SENTENCIA','declaracion',3,'p_declaracion','sintax.py',26),
  ('asignacion -> IDENTIFICADOR OPERADOR expresion FIN_SENTENCIA','asignacion',4,'p_asignacion','sintax.py',30),
  ('condicional -> CONDICIONAL_SI ( expresion ) bloque','condicional',5,'p_condicional','sintax.py',34),
  ('condicional -> CONDICIONAL_SI ( expresion ) bloque CONDICIONAL_SINO bloque','condicional',7,'p_condicional','sintax.py',35),
  ('condicional -> CONDICIONAL_SI ( expresion ) bloque CONDICIONAL_CONTRARIO bloque','condicional',7,'p_condicional','sintax.py',36),
  ('ciclo_for -> CICLO_FOR ( asignacion expresion FIN_SENTENCIA asignacion ) bloque','ciclo_for',8,'p_ciclo_for','sintax.py',40),
  ('ciclo_while -> CICLO_WHILE ( expresion ) bloque','ciclo_while',5,'p_ciclo_while','sintax.py',44),
  ('expresion -> ENTERO','expresion',1,'p_expresion','sintax.py',48),
  ('expresion -> FLOTANTE','expresion',1,'p_expresion','sintax.py',49),
  ('expresion -> CADENA','expresion',1,'p_expresion','sintax.py',50),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion','sintax.py',51),
  ('bloque -> { statement_list }','bloque',3,'p_bloque','sintax.py',55),
]
